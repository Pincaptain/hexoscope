const TOP_LEFT="TOP_LEFT",TOP="TOP",TOP_RIGHT="TOP_RIGHT",BOTTOM_LEFT="BOTTOM_LEFT",BOTTOM="BOTTOM",BOTTOM_RIGHT="BOTTOM_RIGHT",SIDES=["TOP_LEFT",TOP,TOP_RIGHT,BOTTOM_LEFT,BOTTOM,BOTTOM_RIGHT],SOURCE="SOURCE",RECEIVER="RECEIVER",STANDARD="STANDARD",chipFillStyle="#003c52",canBeSwappedChipFillStyle="#005e80",selectedChipFillStyle="#0073a2",inactiveChipFillStyle="#00141a",sourceChipFillStyle="#6000d9",activeChipFillStyle="#a100ff",selectedActiveChipFillStyle="#d900ff",receiverChipFillStyle="#00ab9d",chipStrokeStyle="#fff",connectorFillStyle="#fff",chipWidth=128,chipHeight=128,MENU="MENU",CREATE_POWER_STATIONS="CREATE_POWER_STATIONS",CREATE_CHIPS="CREATE_CHIPS",PLAY="PLAY";let canvas,context,gameState=MENU,chips=[],selectedChip=null;const onCreateChipsMouseDown=a=>{if(0!==a.button)return;const b=a.clientX-canvas.offsetLeft,c=a.clientY-canvas.offsetTop,d=getChipAt(b,c);if(!validateClickedChip(d))return;const e=prompt("Please enter the connectors for the chip in the following format: TOP, TOP_RIGHT, TOP_LEFT, BOTTOM, BOTTOM_RIGHT, BOTTOM_LEFT."),f=validateConnectors(e);f&&(d.type=STANDARD,SIDES.forEach(a=>{f.includes(a)&&(d.neighbours[a].isConnected=!0)}),drawChips())},validateConnectors=a=>{if(!a)return alert("Please enter the connectors for the chip."),null;const b=a.split(",").map(a=>a.trim().toUpperCase()),c=b.every(a=>SIDES.includes(a));return c?b:(alert("Please enter valid connectors for the chip."),null)},onCreateGame=()=>{const a=widthInput.value,b=heightInput.value,c=validateDimensions(a,b);c&&(canvas=createCanvas(a,b),context=canvas.getContext("2d"),nextButton.disabled=!1,nextButton.innerHTML="Next",instructionsParagraph.innerHTML="Right click on an inactive chip to make it a source chip and left click on an inactive chip to make it a receiver chip. Once this is done press the \"Next\" button to continue.",onGameCreated())},validateDimensions=(a,b)=>a&&b?!(640>a||480>b)||(alert("The minimum width is 640 and the minimum height is 480."),!1):(alert("Please enter a width and height for the game board."),!1),createCanvas=(a,b)=>{canvasContainer.hasChildNodes()&&canvasContainer.removeChild(canvasContainer.childNodes[0]);const c=document.createElement("canvas");return c.setAttribute("id","canvas"),c.setAttribute("width",a),c.setAttribute("height",b),canvasContainer.appendChild(c)},widthInput=document.getElementById("menu__input__width"),heightInput=document.getElementById("menu__input__height"),canvasContainer=document.getElementById("canvas__container"),onCreatePowerStationsMouseDown=a=>{const b=a.clientX-canvas.offsetLeft,c=a.clientY-canvas.offsetTop,d=getChipAt(b,c);if(validateClickedChip(d)){if(0===a.button)activatePowerStation(d,SOURCE);else if(2===a.button)activatePowerStation(d,RECEIVER);else return void alert("Please use the left or right mouse button to select the chip type based on the instructions.");drawChips()}},activatePowerStation=(a,b)=>{a.type=b,SIDES.forEach(b=>{a.neighbours[b].isConnected=!0})},onGameCreated=()=>{setupGameState(),setupCanvasEvents(),setupChips(),drawChips(),setupChipsNeighbours()},setupGameState=()=>{gameState=CREATE_POWER_STATIONS},setupCanvasEvents=()=>{canvas.addEventListener("contextmenu",a=>{a.preventDefault(),a.stopPropagation()}),canvas.addEventListener("mousedown",a=>{gameState===CREATE_POWER_STATIONS?onCreatePowerStationsMouseDown(a):gameState===CREATE_CHIPS?onCreateChipsMouseDown(a):gameState===PLAY?onPlayMouseDown(a):void 0})},setupChips=()=>{chips=[];let a=0,b=0,c=0,d=0,e=!0;for(;b<canvas.height;){for(;a<canvas.width&&!willDrawOutsideOfBounds(a,b);){let c,f;e?(c=a+(0===a?0:chipWidth/4),f=b,a+=chipWidth/2+(0===a?0:chipWidth/4),b+=chipHeight/2):(c=a+(0===a?0:chipWidth/4),f=b,a+=chipWidth/2+chipWidth/4,b-=chipHeight/2),chips.push(new Chip(c,f)),e=!e,d++}e=!0,b=(c+1)*chipHeight,a=0,c++}},willDrawOutsideOfBounds=(a,b)=>a+chipWidth>canvas.width||b+chipHeight>canvas.height,setupChipsNeighbours=()=>{chips.forEach(a=>{setupChipNeighbours(a)})},setupChipNeighbours=a=>{const b=a.x+chipWidth/2,c=a.y+chipHeight/2,d=getChipAt(b-chipWidth+chipWidth/4,c-chipHeight/2),e=getChipAt(b,c-chipHeight),f=getChipAt(b+chipWidth-chipWidth/4,c-chipHeight/2),g=getChipAt(b-chipWidth+chipWidth/4,c+chipHeight/2),h=getChipAt(b,c+chipHeight),i=getChipAt(b+chipWidth-chipWidth/4,c+chipHeight/2);a.neighbours={TOP_LEFT:{chip:d,isConnected:!1},TOP:{chip:e,isConnected:!1},TOP_RIGHT:{chip:f,isConnected:!1},BOTTOM_LEFT:{chip:g,isConnected:!1},BOTTOM:{chip:h,isConnected:!1},BOTTOM_RIGHT:{chip:i,isConnected:!1}}},onLoad=()=>{createGameButton.addEventListener("click",onCreateGame),nextButton.disabled=!0,nextButton.addEventListener("click",onNext),instructionsParagraph.innerHTML="Enter a width and height for the game board and press the \"Create Game\" button."},createGameButton=document.getElementById("menu__button__create-game"),nextButton=document.getElementById("menu__button__next"),instructionsParagraph=document.getElementById("menu__instructions");window.addEventListener("load",onLoad);const onNext=()=>{gameState===CREATE_POWER_STATIONS?onCreatePowerStationsNext():gameState===CREATE_CHIPS?onCreateChipsNext():void 0},onCreatePowerStationsNext=()=>{validatePowerStations()&&(instructionsParagraph.innerHTML="Left click on an unused chip to make it a standard chip. Once you press a chip a prompt will appear asking you to input the connectors for the chip in this style \"TOP, TOP_RIGHT...\". Once this is done press the \"Play\" button to start the game.",nextButton.innerHTML="Play",onPowerStationsCreated())},validatePowerStations=()=>{const a=chips.filter(a=>a.isUsed()&&a.type!==STANDARD).reduce((a,b)=>(a[b.type].push(b),a),{[SOURCE]:[],[RECEIVER]:[]});return 0===a[SOURCE].length?(alert("Please add at least one power source."),!1):0!==a[RECEIVER].length||(alert("Please add at least one power receiver."),!1)},onCreateChipsNext=()=>{validateChips()&&(instructionsParagraph.innerHTML="I hope you enjoy the game!",nextButton.disabled=!0,onPlay())},validateChips=()=>{const a=chips.filter(a=>a.type===STANDARD);return 0!==a.length||(alert("Please add at least one standard chip."),!1)},onPlay=()=>{gameState=PLAY,activateChips(),drawChips(),checkWin()},onPlayMouseDown=a=>{if(0!==a.button)return;const b=a.clientX-canvas.offsetLeft,c=a.clientY-canvas.offsetTop,d=getChipAt(b,c);if(d&&d.canBeSwapped()){if(!selectedChip)selectedChip=d;else if(selectedChip===d)selectedChip=null;else{if(!d.canBeSwapped())return;swapChips(selectedChip,d),activateChips(),checkWin()}drawChips()}},swapChips=(a,b)=>{const c=getSideToIsConnectedMap(a),d=getSideToIsConnectedMap(b);recalculateNeighbours(a,d),recalculateNeighbours(b,c),selectedChip=null},getSideToIsConnectedMap=a=>{const b={};return SIDES.forEach(c=>{const d=a.neighbours[c];b[c]=d.isConnected}),b},recalculateNeighbours=(a,b)=>{SIDES.forEach(c=>{a.neighbours[c].isConnected=b[c]})},onPowerStationsCreated=()=>{gameState=CREATE_CHIPS};class Chip{constructor(a,b){this.id=crypto.randomUUID(),this.x=a,this.y=b,this.type=null,this.isActive=!1,this.neighbours={}}isUsed(){return null!==this.type}canBeSwapped(){return!(this.type!==STANDARD)&&SIDES.map(a=>this.neighbours[a]).map(a=>a.chip).filter(a=>null!==a).some(a=>a.isActive)}draw(){this.shouldDrawChip()&&(this.setupChipColors(),this.drawChip(),this.setupConnectorColors(),this.drawConnectors())}shouldDrawChip(){return gameState!==PLAY||this.isUsed()}setupChipColors(){switch(this.type){case STANDARD:if(selectedChip&&selectedChip.id===this.id){if(this.isActive){context.fillStyle=selectedActiveChipFillStyle;break}context.fillStyle=selectedChipFillStyle;break}if(this.isActive){context.fillStyle=activeChipFillStyle;break}if(this.canBeSwapped()){context.fillStyle=canBeSwappedChipFillStyle;break}context.fillStyle=chipFillStyle;break;case SOURCE:context.fillStyle=sourceChipFillStyle;break;case RECEIVER:context.fillStyle=receiverChipFillStyle;break;default:context.fillStyle=inactiveChipFillStyle;}context.strokeStyle=chipStrokeStyle}drawChip(){const a=this.x,b=this.y;context.beginPath(),context.moveTo(a,b+chipHeight/2),context.lineTo(a+chipWidth/4,b),context.lineTo(a+3*chipWidth/4,b),context.lineTo(a+chipWidth,b+chipHeight/2),context.lineTo(a+3*chipWidth/4,b+chipHeight),context.lineTo(a+chipWidth/4,b+chipHeight),context.closePath(),context.fill(),context.stroke()}setupConnectorColors(){context.fillStyle=connectorFillStyle}drawConnectors(){const a=this.x,b=this.y;Object.keys(this.neighbours).forEach(c=>{const d=this.neighbours[c];d.isConnected&&(context.beginPath(),c===TOP_LEFT?(context.moveTo(a+chipWidth/2,b+chipHeight/2),context.lineTo(a+chipWidth/4-chipWidth/4+chipWidth/8,b+chipHeight/4)):c===TOP?(context.moveTo(a+chipWidth/2,b+chipHeight/2),context.lineTo(a+chipWidth/2,b)):c===TOP_RIGHT?(context.moveTo(a+chipWidth/2,b+chipHeight/2),context.lineTo(a+3*chipWidth/4+chipWidth/4-chipWidth/8,b+chipHeight/4)):c===BOTTOM_LEFT?(context.moveTo(a+chipWidth/2,b+chipHeight/2),context.lineTo(a+chipWidth/4-chipWidth/4+chipWidth/8,b+chipHeight-chipHeight/4)):c===BOTTOM?(context.moveTo(a+chipWidth/2,b+chipHeight/2),context.lineTo(a+chipWidth/2,b+chipHeight)):c===BOTTOM_RIGHT?(context.moveTo(a+chipWidth/2,b+chipHeight/2),context.lineTo(a+3*chipWidth/4+chipWidth/4-chipWidth/8,b+chipHeight-chipHeight/4)):void 0,context.fill(),context.stroke())})}contains(a,b){return this.x<=a&&a<=this.x+chipWidth&&this.y<=b&&b<=this.y+chipHeight}}const drawChips=()=>{context.clearRect(0,0,canvas.width,canvas.height),chips.forEach(a=>{a.draw()})},getChipAt=(a,b)=>chips.find(c=>c.contains(a,b))||null,validateClickedChip=a=>a?!a.isUsed()||(alert("Please select a chip that is not already used."),!1):(alert("Please select a chip."),!1),activateChips=()=>{chips.forEach(a=>{a.type!==SOURCE&&(a.isActive=!1)});const a=chips.filter(a=>a.type===SOURCE);a.forEach(a=>{a.isActive=!0,activateChipsRecursively(a)})},activateChipsRecursively=a=>{SIDES.forEach(b=>{const c=a.neighbours[b];if(!c.chip)return;const d=c.isConnected,e=c.chip.neighbours[getOppositeSide(b)].isConnected;d&&e&&!c.chip.isActive&&(c.chip.isActive=!0,c.chip.type!==RECEIVER&&activateChipsRecursively(c.chip))})},getOppositeSide=a=>a===TOP_LEFT?BOTTOM_RIGHT:a===TOP?BOTTOM:a===TOP_RIGHT?BOTTOM_LEFT:a===BOTTOM_LEFT?TOP_RIGHT:a===BOTTOM?TOP:a===BOTTOM_RIGHT?TOP_LEFT:void 0,checkWin=()=>{const a=chips.filter(a=>a.type===RECEIVER).every(a=>a.isActive);if(a){const a=confirm("You win! Press OK to restart.");a&&(drawChips(),Canvas2Image.saveAsPNG(canvas),location.reload())}};var Canvas2Image=function(){function a(a,b,c){var d=a.width,e=a.height;null==b&&(b=d),null==c&&(c=e);var f=document.createElement("canvas"),g=f.getContext("2d");return f.width=b,f.height=c,g.drawImage(a,0,0,d,e,0,0,b,c),f}function b(b,c,d,e){return b=a(b,d,e),b.toDataURL(c)}function c(a,b){var c=document.createElement("a");c.href=a,c.download=b;var d=new MouseEvent("click",{bubbles:!1,cancelable:!1});c.dispatchEvent(d)}function d(a){var b=document.createElement("img");return b.src=a,b}function e(a){a=a.toLowerCase().replace(/jpg/i,"jpeg");var b=a.match(/png|jpeg|bmp|gif/)[0];return"image/"+b}function f(a){if(!window.btoa)throw"btoa undefined";var b="";if("string"==typeof a)b=a;else for(var c=0;c<a.length;c++)b+=String.fromCharCode(a[c]);return btoa(b)}function g(a){var b=a.width,c=a.height;return a.getContext("2d").getImageData(0,0,b,c)}function h(a,b){return"data:"+b+";base64,"+a}var i=function(){var a=document.createElement("canvas"),b=a.getContext("2d");return{canvas:!!b,imageData:!!b.getImageData,dataURL:!!a.toDataURL,btoa:!!window.btoa}}(),j=function(a){var b=a.width,d=a.height,e=3*(b*d),g=e+54,h=a.data,i="",j=d,k=String.fromCharCode;do{for(var l,m=(b<<2)*(j-1),n="",o=0;o<b;o++)l=o<<2,n+=k(h[m+l+2])+k(h[m+l+1])+k(h[m+l]);for(var p=0;p<(4-3*b%4)%4;p++)n+=String.fromCharCode(0);i+=n}while(--j);var q=f([66,77,255&g,255&g>>8,255&g>>16,255&g>>24,0,0,0,0,54,0,0,0].concat([40,0,0,0,255&b,255&b>>8,255&b>>16,255&b>>24,255&d,255&d>>8,255&d>>16,255&d>>24,1,0,24,0,0,0,0,0,255&e,255&e>>8,255&e>>16,255&e>>24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]))+f(i);return q},k=function(d,f,k,l,m){if(i.canvas&&i.dataURL)if("string"==typeof d&&(d=document.getElementById(d)),null==l&&(l="png"),m=null==m||0===m.length?Date.now()+"."+l:m+"."+l,l=e(l),/bmp/.test(l)){var n=g(a(d,f,k)),o=j(n);c(h(o,downloadMimedownloadMime),m)}else{var o=b(d,l,f,k);c(o.replace(l,"image/octet-stream"),m)}},l=function(c,f,k,l){if(i.canvas&&i.dataURL){if("string"==typeof c&&(c=document.getElementById(c)),null==l&&(l="png"),l=e(l),/bmp/.test(l)){var m=g(a(c,f,k)),n=j(m);return d(h(n,"image/bmp"))}var n=b(c,l,f,k);return d(n)}};return{saveAsImage:k,saveAsPNG:function(a,b,c,d){return k(a,b,c,"png",d)},saveAsJPEG:function(a,b,c,d){return k(a,b,c,"jpeg",d)},saveAsGIF:function(a,b,c,d){return k(a,b,c,"gif",d)},saveAsBMP:function(a,b,c,d){return k(a,b,c,"bmp",d)},convertToImage:l,convertToPNG:function(a,b,c){return l(a,b,c,"png")},convertToJPEG:function(a,b,c){return l(a,b,c,"jpeg")},convertToGIF:function(a,b,c){return l(a,b,c,"gif")},convertToBMP:function(a,b,c){return l(a,b,c,"bmp")}}}();